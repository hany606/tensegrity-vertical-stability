diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/CMakeLists.txt NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/CMakeLists.txt
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/CMakeLists.txt	2014-11-10 09:15:18.680913618 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/CMakeLists.txt	2014-08-18 20:29:02.998097341 -0700
@@ -1,67 +1,36 @@
-# This is basically the overall name of the project in Visual Studio this is the name of the Solution File
-
-
-# For every executable you have with a main method you should have an add_executable line below.
-# For every add executable line you should list every .cpp and .h file you have associated with that executable.  
-
-
-
-
-# You shouldn't have to modify anything below this line 
-########################################################
-
-
-
-
 INCLUDE_DIRECTORIES(
 ${BULLET_PHYSICS_SOURCE_DIR}/src ${BULLET_PHYSICS_SOURCE_DIR}/Extras/ConvexHull  
+${BULLET_PHYSICS_SOURCE_DIR}/Demos/OpenGL
 )
 
-		
-ADD_LIBRARY(OpenGLSupport
-		GLDebugFont.cpp
-		GLDebugFont.h
-		GL_DialogDynamicsWorld.cpp
-		GL_DialogDynamicsWorld.h
-		GL_DialogWindow.cpp
-		GL_DialogWindow.h
-		GL_ShapeDrawer.cpp
-		GL_ShapeDrawer.h
-		GL_Simplex1to4.cpp
-		GL_Simplex1to4.h
-		GLDebugDrawer.cpp
-		GLDebugDrawer.h
-		
-		RenderTexture.cpp
-		RenderTexture.h
-		DemoApplication.cpp
-		DemoApplication.h
-		
-		GlutDemoApplication.cpp
-		GlutDemoApplication.h
-		GlutStuff.cpp
-		GlutStuff.h
-
-		stb_image.cpp
-		stb_image.h
-
-		Win32DemoApplication.cpp
-		Win32DemoApplication.h
+                
+ADD_LIBRARY(tgOpenGLSupport
+                tgDemoApplication.cpp
+                tgDemoApplication.h
+                
+                tgGlutDemoApplication.cpp
+                tgGlutDemoApplication.h
+                tgGlutStuff.cpp
+                tgGlutStuff.h
+
+        tgGLDebugDrawer.cpp
+                #Win32DemoApplication.cpp
+                #Win32DemoApplication.h
 )
 
-
 IF (BUILD_SHARED_LIBS)
-  TARGET_LINK_LIBRARIES(OpenGLSupport BulletDynamics BulletCollision ${GLUT_glut_LIBRARY} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})
+  TARGET_LINK_LIBRARIES(tgOpenGLSupport OpenGLSupport BulletDynamics BulletCollision ${GLUT_glut_LIBRARY} ${OPENGL_gl_LIBRARY} ${OPENGL_glu_LIBRARY})
 ENDIF (BUILD_SHARED_LIBS)
 
 #INSTALL of other files requires CMake 2.6
 IF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 2.5)
-	IF(INSTALL_EXTRA_LIBS)
-		IF (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
-			INSTALL(TARGETS OpenGLSupport DESTINATION .)
-		ELSE (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
-		INSTALL(TARGETS OpenGLSupport DESTINATION lib)
-			INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} DESTINATION include FILES_MATCHING PATTERN "*.h")
-		ENDIF (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
-	ENDIF (INSTALL_EXTRA_LIBS)
+        IF(INSTALL_EXTRA_LIBS)
+                IF (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
+                        INSTALL(TARGETS tgOpenGLSupport OpenGLSupport DESTINATION .)
+                ELSE (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
+                INSTALL(TARGETS tgOpenGLSupport OpenGLSupport DESTINATION lib)
+                        INSTALL(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR} DESTINATION include FILES_MATCHING PATTERN "*.h")
+                ENDIF (APPLE AND BUILD_SHARED_LIBS AND FRAMEWORK)
+        ENDIF (INSTALL_EXTRA_LIBS)
 ENDIF (${CMAKE_MAJOR_VERSION}.${CMAKE_MINOR_VERSION} GREATER 2.5)
+
Binary files NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/libtgOpenGLSupport.a and NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/libtgOpenGLSupport.a differ
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.cpp NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.cpp
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.cpp	2014-11-10 09:15:18.692913618 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.cpp	2014-10-21 14:06:06.471590379 -0700
@@ -14,7 +14,7 @@ subject to the following restrictions:
 */
 
 
-#include "DemoApplication.h"
+#include "tgDemoApplication.h"
 #include "LinearMath/btIDebugDraw.h"
 #include "BulletDynamics/Dynamics/btDynamicsWorld.h"
 
@@ -33,6 +33,7 @@ subject to the following restrictions:
 #include "LinearMath/btSerializer.h"
 #include "GLDebugFont.h"
 
+#include <iostream>
 
 extern bool gDisableDeactivation;
 int numObjects = 0;
@@ -55,7 +56,7 @@ extern int gTotalBytesAlignedAllocs;
 #endif //
 
 
-DemoApplication::DemoApplication()
+tgDemoApplication::tgDemoApplication()
 //see btIDebugDraw.h for modes
 :
 m_dynamicsWorld(0),
@@ -85,6 +86,9 @@ m_ShootBoxInitialSpeed(40.f),
 m_stepping(true),
 m_singleStep(false),
 m_idle(false),
+exitFlag(false),
+m_autocam(false),
+
 
 m_enableshadows(false),
 m_sundirection(btVector3(1,-2,1)*1000),
@@ -101,7 +105,7 @@ m_defaultContactProcessingThreshold(BT_L
 
 
 
-DemoApplication::~DemoApplication()
+tgDemoApplication::~tgDemoApplication()
 {
 #ifndef BT_NO_PROFILE
 	CProfileManager::Release_Iterator(m_profileIterator);
@@ -112,17 +116,19 @@ DemoApplication::~DemoApplication()
 
 	if (m_shapeDrawer)
 		delete m_shapeDrawer;
+		
+	std::cout<< "deleted tgDemoApplication" <<std::endl;
 }
 
 
-void DemoApplication::overrideGLShapeDrawer (GL_ShapeDrawer* shapeDrawer)
+void tgDemoApplication::overrideGLShapeDrawer (GL_ShapeDrawer* shapeDrawer)
 {
 	shapeDrawer->enableTexture (m_shapeDrawer->hasTextureEnabled());
 	delete m_shapeDrawer;
 	m_shapeDrawer = shapeDrawer;
 }
 
-void DemoApplication::myinit(void)
+void tgDemoApplication::myinit(void)
 {
 
 	GLfloat light_ambient[] = { btScalar(0.2), btScalar(0.2), btScalar(0.2), btScalar(1.0) };
@@ -158,19 +164,19 @@ void DemoApplication::myinit(void)
 }
 
 
-void	DemoApplication::setCameraDistance(float dist)
+void	tgDemoApplication::setCameraDistance(float dist)
 {
 	m_cameraDistance  = dist;
 }
 
-float	DemoApplication::getCameraDistance()
+float	tgDemoApplication::getCameraDistance()
 {
 	return m_cameraDistance;
 }
 
 
 
-void DemoApplication::toggleIdle() {
+void tgDemoApplication::toggleIdle() {
 	if (m_idle) {
 		m_idle = false;
 	}
@@ -182,7 +188,7 @@ void DemoApplication::toggleIdle() {
 
 
 
-void DemoApplication::updateCamera() {
+void tgDemoApplication::updateCamera() {
 
 
 	glMatrixMode(GL_PROJECTION);
@@ -254,30 +260,30 @@ void DemoApplication::updateCamera() {
 
 const float STEPSIZE = 5;
 
-void DemoApplication::stepLeft() 
+void tgDemoApplication::stepLeft() 
 { 
 	m_azi -= STEPSIZE; if (m_azi < 0) m_azi += 360; updateCamera(); 
 }
-void DemoApplication::stepRight() 
+void tgDemoApplication::stepRight() 
 { 
 	m_azi += STEPSIZE; if (m_azi >= 360) m_azi -= 360; updateCamera(); 
 }
-void DemoApplication::stepFront() 
+void tgDemoApplication::stepFront() 
 { 
 	m_ele += STEPSIZE; if (m_ele >= 360) m_ele -= 360; updateCamera(); 
 }
-void DemoApplication::stepBack() 
+void tgDemoApplication::stepBack() 
 { 
 	m_ele -= STEPSIZE; if (m_ele < 0) m_ele += 360; updateCamera(); 
 }
-void DemoApplication::zoomIn() 
+void tgDemoApplication::zoomIn() 
 { 
 	m_cameraDistance -= btScalar(m_zoomStepSize); updateCamera(); 
 	if (m_cameraDistance < btScalar(0.1))
 		m_cameraDistance = btScalar(0.1);
 
 }
-void DemoApplication::zoomOut() 
+void tgDemoApplication::zoomOut() 
 { 
 	m_cameraDistance += btScalar(m_zoomStepSize); updateCamera(); 
 
@@ -292,7 +298,7 @@ void DemoApplication::zoomOut()
 
 
 
-void DemoApplication::reshape(int w, int h) 
+void tgDemoApplication::reshape(int w, int h) 
 {
 	GLDebugResetFont(w,h);
 
@@ -305,7 +311,7 @@ void DemoApplication::reshape(int w, int
 
 
 
-void DemoApplication::keyboardCallback(unsigned char key, int x, int y)
+void tgDemoApplication::keyboardCallback(unsigned char key, int x, int y)
 {
 	(void)x;
 	(void)y;
@@ -326,31 +332,13 @@ void DemoApplication::keyboardCallback(u
 
 	switch (key) 
 	{
-	case 8:
-		{
-			int numObj = getDynamicsWorld()->getNumCollisionObjects();
-			if (numObj)
-			{
-				btCollisionObject* obj = getDynamicsWorld()->getCollisionObjectArray()[numObj-1];
-
-				getDynamicsWorld()->removeCollisionObject(obj);
-				btRigidBody* body = btRigidBody::upcast(obj);
-				if (body && body->getMotionState())
-				{
-					delete body->getMotionState();					
-				}
-				delete obj;
-
-
-			}
-			break;
-		}
 	case 'q' : 
 #ifdef BT_USE_FREEGLUT
 		//return from glutMainLoop(), detect memory leaks etc.
 		glutLeaveMainLoop();
+		exitFlag = true;
 #else
-		exit(0);
+	exit(0);
 #endif
 		break;
 
@@ -507,6 +495,12 @@ void DemoApplication::keyboardCallback(u
 			m_ShootBoxInitialSpeed -= 10.f;
 			break;
 		}
+	
+	case	';':
+		{
+			m_autocam=!m_autocam;
+			break;
+		}
 
 	default:
 		//        std::cout << "unused key : " << key << std::endl;
@@ -520,7 +514,7 @@ void DemoApplication::keyboardCallback(u
 
 }
 
-void	DemoApplication::setDebugMode(int mode)
+void	tgDemoApplication::setDebugMode(int mode)
 {
 	m_debugMode = mode;
 	if (getDynamicsWorld() && getDynamicsWorld()->getDebugDrawer())
@@ -532,7 +526,7 @@ void	DemoApplication::setDebugMode(int m
 
 
 
-void DemoApplication::moveAndDisplay()
+void tgDemoApplication::moveAndDisplay()
 {
 	if (!m_idle)
 		clientMoveAndDisplay();
@@ -543,13 +537,13 @@ void DemoApplication::moveAndDisplay()
 
 
 
-void DemoApplication::displayCallback()
+void tgDemoApplication::displayCallback()
 {
 }
 
 #define NUM_SPHERES_ON_DIAGONAL 9
 
-void	DemoApplication::setShootBoxShape ()
+void	tgDemoApplication::setShootBoxShape ()
 {
 	if (!m_shootBoxShape)
 	{
@@ -559,7 +553,7 @@ void	DemoApplication::setShootBoxShape (
 	}
 }
 
-void	DemoApplication::shootBox(const btVector3& destination)
+void	tgDemoApplication::shootBox(const btVector3& destination)
 {
 
 	if (m_dynamicsWorld)
@@ -597,11 +591,11 @@ void	DemoApplication::shootBox(const btV
 int gPickingConstraintId = 0;
 btVector3 gOldPickingPos;
 btVector3 gHitPos(-1,-1,-1);
-btScalar gOldPickingDist  = 0.f;
+float gOldPickingDist  = 0.f;
 btRigidBody* pickedBody = 0;//for deactivation state
 
 
-btVector3	DemoApplication::getRayTo(int x,int y)
+btVector3	tgDemoApplication::getRayTo(int x,int y)
 {
 
 	
@@ -674,7 +668,7 @@ btVector3	DemoApplication::getRayTo(int
 btScalar mousePickClamping = 30.f;
 
 
-void DemoApplication::mouseFunc(int button, int state, int x, int y)
+void tgDemoApplication::mouseFunc(int button, int state, int x, int y)
 {
 	if (state == 0) 
 	{
@@ -773,14 +767,82 @@ void DemoApplication::mouseFunc(int butt
 					if (rayCallback.hasHit())
 					{
 
-						btVector3 pickPos = rayCallback.m_hitPointWorld;
-						
-						pickObject(pickPos, rayCallback.m_collisionObject);
-						
-						gOldPickingPos = rayTo;
-						gHitPos = pickPos;
 
-						gOldPickingDist  = (pickPos-rayFrom).length();
+						btRigidBody* body = (btRigidBody*)btRigidBody::upcast(rayCallback.m_collisionObject);
+						if (body)
+						{
+							//other exclusions?
+							if (!(body->isStaticObject() || body->isKinematicObject()))
+							{
+								pickedBody = body;
+								pickedBody->setActivationState(DISABLE_DEACTIVATION);
+
+
+								btVector3 pickPos = rayCallback.m_hitPointWorld;
+								//printf("pickPos=%f,%f,%f\n",pickPos.getX(),pickPos.getY(),pickPos.getZ());
+
+
+								btVector3 localPivot = body->getCenterOfMassTransform().inverse() * pickPos;
+
+								
+
+								
+
+
+								if ((m_modifierKeys& BT_ACTIVE_SHIFT)==0)
+								{
+									btTransform tr;
+									tr.setIdentity();
+									tr.setOrigin(localPivot);
+									btGeneric6DofConstraint* dof6 = new btGeneric6DofConstraint(*body, tr,false);
+									dof6->setLinearLowerLimit(btVector3(0,0,0));
+									dof6->setLinearUpperLimit(btVector3(0,0,0));
+									dof6->setAngularLowerLimit(btVector3(0,0,0));
+									dof6->setAngularUpperLimit(btVector3(0,0,0));
+
+									m_dynamicsWorld->addConstraint(dof6,true);
+									m_pickConstraint = dof6;
+
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,0);
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,1);
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,2);
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,3);
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,4);
+									dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,5);
+
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,0);
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,1);
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,2);
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,3);
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,4);
+									dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,5);
+								} else
+								{
+									btPoint2PointConstraint* p2p = new btPoint2PointConstraint(*body,localPivot);
+									m_dynamicsWorld->addConstraint(p2p,true);
+									m_pickConstraint = p2p;
+									p2p->m_setting.m_impulseClamp = mousePickClamping;
+									//very weak constraint for picking
+									p2p->m_setting.m_tau = 0.001f;
+/*
+									p2p->setParam(BT_CONSTRAINT_CFM,0.8,0);
+									p2p->setParam(BT_CONSTRAINT_CFM,0.8,1);
+									p2p->setParam(BT_CONSTRAINT_CFM,0.8,2);
+									p2p->setParam(BT_CONSTRAINT_ERP,0.1,0);
+									p2p->setParam(BT_CONSTRAINT_ERP,0.1,1);
+									p2p->setParam(BT_CONSTRAINT_ERP,0.1,2);
+									*/
+									
+
+								}
+					
+								//save mouse position for dragging
+								gOldPickingPos = rayTo;
+								gHitPos = pickPos;
+
+								gOldPickingDist  = (pickPos-rayFrom).length();
+							}
+						}
 					}
 				}
 
@@ -799,79 +861,7 @@ void DemoApplication::mouseFunc(int butt
 
 }
 
-void DemoApplication::pickObject(const btVector3& pickPos, const btCollisionObject* hitObj)
-{
-	
-	btRigidBody* body = (btRigidBody*)btRigidBody::upcast(hitObj);
-	if (body)
-	{
-		//other exclusions?
-		if (!(body->isStaticObject() || body->isKinematicObject()))
-		{
-			pickedBody = body;
-			pickedBody->setActivationState(DISABLE_DEACTIVATION);
-
-
-			//printf("pickPos=%f,%f,%f\n",pickPos.getX(),pickPos.getY(),pickPos.getZ());
-
-
-			btVector3 localPivot = body->getCenterOfMassTransform().inverse() * pickPos;
-
-			if ((m_modifierKeys& BT_ACTIVE_SHIFT)!=0)
-			{
-				btTransform tr;
-				tr.setIdentity();
-				tr.setOrigin(localPivot);
-				btGeneric6DofConstraint* dof6 = new btGeneric6DofConstraint(*body, tr,false);
-				dof6->setLinearLowerLimit(btVector3(0,0,0));
-				dof6->setLinearUpperLimit(btVector3(0,0,0));
-				dof6->setAngularLowerLimit(btVector3(0,0,0));
-				dof6->setAngularUpperLimit(btVector3(0,0,0));
-
-				m_dynamicsWorld->addConstraint(dof6,true);
-				m_pickConstraint = dof6;
-
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,0);
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,1);
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,2);
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,3);
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,4);
-				dof6->setParam(BT_CONSTRAINT_STOP_CFM,0.8,5);
-
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,0);
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,1);
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,2);
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,3);
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,4);
-				dof6->setParam(BT_CONSTRAINT_STOP_ERP,0.1,5);
-			} else
-			{
-				btPoint2PointConstraint* p2p = new btPoint2PointConstraint(*body,localPivot);
-				m_dynamicsWorld->addConstraint(p2p,true);
-				m_pickConstraint = p2p;
-				p2p->m_setting.m_impulseClamp = mousePickClamping;
-				//very weak constraint for picking
-				p2p->m_setting.m_tau = 0.001f;
-	/*
-				p2p->setParam(BT_CONSTRAINT_CFM,0.8,0);
-				p2p->setParam(BT_CONSTRAINT_CFM,0.8,1);
-				p2p->setParam(BT_CONSTRAINT_CFM,0.8,2);
-				p2p->setParam(BT_CONSTRAINT_ERP,0.1,0);
-				p2p->setParam(BT_CONSTRAINT_ERP,0.1,1);
-				p2p->setParam(BT_CONSTRAINT_ERP,0.1,2);
-				*/
-									
-
-			}
-					
-			//save mouse position for dragging
-					
-		}
-	}
-						
-}
-
-void DemoApplication::removePickingConstraint()
+void tgDemoApplication::removePickingConstraint()
 {
 	if (m_pickConstraint && m_dynamicsWorld)
 	{
@@ -885,7 +875,7 @@ void DemoApplication::removePickingConst
 	}
 }
 
-void	DemoApplication::mouseMotionFunc(int x,int y)
+void	tgDemoApplication::mouseMotionFunc(int x,int y)
 {
 
 	if (m_pickConstraint)
@@ -1006,7 +996,7 @@ void	DemoApplication::mouseMotionFunc(in
 
 
 
-btRigidBody*	DemoApplication::localCreateRigidBody(float mass, const btTransform& startTransform,btCollisionShape* shape)
+btRigidBody*	tgDemoApplication::localCreateRigidBody(float mass, const btTransform& startTransform,btCollisionShape* shape)
 {
 	btAssert((!shape || shape->getShapeType() != INVALID_SHAPE_PROXYTYPE));
 
@@ -1039,7 +1029,7 @@ btRigidBody*	DemoApplication::localCreat
 }
 
 //See http://www.lighthouse3d.com/opengl/glut/index.php?bmpfontortho
-void DemoApplication::setOrthographicProjection() 
+void tgDemoApplication::setOrthographicProjection() 
 {
 
 	// switch to projection mode
@@ -1063,7 +1053,7 @@ void DemoApplication::setOrthographicPro
 
 }
 
-void DemoApplication::resetPerspectiveProjection() 
+void tgDemoApplication::resetPerspectiveProjection() 
 {
 
 	glMatrixMode(GL_PROJECTION);
@@ -1077,14 +1067,14 @@ void DemoApplication::resetPerspectivePr
 
 extern CProfileIterator * m_profileIterator;
 
-void DemoApplication::displayProfileString(int xOffset,int yStart,char* message)
+void tgDemoApplication::displayProfileString(int xOffset,int yStart,char* message)
 {
 	glRasterPos3f(btScalar(xOffset),btScalar(yStart),btScalar(0));
 	GLDebugDrawString(xOffset,yStart,message);
 }
 
 
-void DemoApplication::showProfileInfo(int& xOffset,int& yStart, int yIncr)
+void tgDemoApplication::showProfileInfo(int& xOffset,int& yStart, int yIncr)
 {
 #ifndef BT_NO_PROFILE
 
@@ -1158,7 +1148,7 @@ void DemoApplication::showProfileInfo(in
 
 
 //
-void	DemoApplication::renderscene(int pass)
+void	tgDemoApplication::renderscene(int pass)
 {
 	btScalar	m[16];
 	btMatrix3x3	rot;rot.setIdentity();
@@ -1167,71 +1157,82 @@ void	DemoApplication::renderscene(int pa
 	for(int i=0;i<numObjects;i++)
 	{
 		btCollisionObject*	colObj=m_dynamicsWorld->getCollisionObjectArray()[i];
-		btRigidBody*		body=btRigidBody::upcast(colObj);
-		if(body&&body->getMotionState())
-		{
-			btDefaultMotionState* myMotionState = (btDefaultMotionState*)body->getMotionState();
-			myMotionState->m_graphicsWorldTrans.getOpenGLMatrix(m);
-			rot=myMotionState->m_graphicsWorldTrans.getBasis();
-		}
-		else
-		{
-			colObj->getWorldTransform().getOpenGLMatrix(m);
-			rot=colObj->getWorldTransform().getBasis();
-		}
-		btVector3 wireColor(1.f,1.0f,0.5f); //wants deactivation
-		if(i&1) wireColor=btVector3(0.f,0.0f,1.f);
-		///color differently for active, sleeping, wantsdeactivation states
-		if (colObj->getActivationState() == 1) //active
+		if ((colObj->getCollisionFlags() & btCollisionObject::CF_NO_CONTACT_RESPONSE) == 0)
 		{
-			if (i & 1)
+			
+			btRigidBody*		body=btRigidBody::upcast(colObj);
+			if(body&&body->getMotionState())
 			{
-				wireColor += btVector3 (1.f,0.f,0.f);
+				btDefaultMotionState* myMotionState = (btDefaultMotionState*)body->getMotionState();
+				myMotionState->m_graphicsWorldTrans.getOpenGLMatrix(m);
+				rot=myMotionState->m_graphicsWorldTrans.getBasis();
 			}
 			else
-			{			
-				wireColor += btVector3 (.5f,0.f,0.f);
+			{
+				colObj->getWorldTransform().getOpenGLMatrix(m);
+				rot=colObj->getWorldTransform().getBasis();
 			}
-		}
-		if(colObj->getActivationState()==2) //ISLAND_SLEEPING
-		{
-			if(i&1)
+			btVector3 wireColor(1.f,1.0f,0.5f); //wants deactivation
+			if(i&1) wireColor=btVector3(0.f,0.0f,1.f);
+			///color differently for active, sleeping, wantsdeactivation states
+			if (colObj->getActivationState() == 1) //active
 			{
-				wireColor += btVector3 (0.f,1.f, 0.f);
+				if (i & 1)
+				{
+					wireColor += btVector3 (1.f,0.f,0.f);
+				}
+				else
+				{			
+					wireColor += btVector3 (.5f,0.f,0.f);
+				}
 			}
-			else
+			if(colObj->getActivationState()==2) //ISLAND_SLEEPING
 			{
-				wireColor += btVector3 (0.f,0.5f,0.f);
+				if(i&1)
+				{
+					wireColor += btVector3 (0.f,1.f, 0.f);
+				}
+				else
+				{
+					wireColor += btVector3 (0.f,0.5f,0.f);
+				}
 			}
-		}
 
-		btVector3 aabbMin(0,0,0),aabbMax(0,0,0);
-		//m_dynamicsWorld->getBroadphase()->getBroadphaseAabb(aabbMin,aabbMax);
-		
-		aabbMin-=btVector3(BT_LARGE_FLOAT,BT_LARGE_FLOAT,BT_LARGE_FLOAT);
-		aabbMax+=btVector3(BT_LARGE_FLOAT,BT_LARGE_FLOAT,BT_LARGE_FLOAT);
-//		printf("aabbMin=(%f,%f,%f)\n",aabbMin.getX(),aabbMin.getY(),aabbMin.getZ());
-//		printf("aabbMax=(%f,%f,%f)\n",aabbMax.getX(),aabbMax.getY(),aabbMax.getZ());
-//		m_dynamicsWorld->getDebugDrawer()->drawAabb(aabbMin,aabbMax,btVector3(1,1,1));
+			btVector3 aabbMin,aabbMax;
+			m_dynamicsWorld->getBroadphase()->getBroadphaseAabb(aabbMin,aabbMax);
+			
+			aabbMin-=btVector3(BT_LARGE_FLOAT,BT_LARGE_FLOAT,BT_LARGE_FLOAT);
+			aabbMax+=btVector3(BT_LARGE_FLOAT,BT_LARGE_FLOAT,BT_LARGE_FLOAT);
+	//		printf("aabbMin=(%f,%f,%f)\n",aabbMin.getX(),aabbMin.getY(),aabbMin.getZ());
+	//		printf("aabbMax=(%f,%f,%f)\n",aabbMax.getX(),aabbMax.getY(),aabbMax.getZ());
+	//		m_dynamicsWorld->getDebugDrawer()->drawAabb(aabbMin,aabbMax,btVector3(1,1,1));
 
 
-		if (!(getDebugMode()& btIDebugDraw::DBG_DrawWireframe))
-		{
-			switch(pass)
+			if (!(getDebugMode()& btIDebugDraw::DBG_DrawWireframe))
 			{
-			case	0:	m_shapeDrawer->drawOpenGL(m,colObj->getCollisionShape(),wireColor,getDebugMode(),aabbMin,aabbMax);break;
-			case	1:	m_shapeDrawer->drawShadow(m,m_sundirection*rot,colObj->getCollisionShape(),aabbMin,aabbMax);break;
-			case	2:	m_shapeDrawer->drawOpenGL(m,colObj->getCollisionShape(),wireColor*btScalar(0.3),0,aabbMin,aabbMax);break;
+				switch(pass)
+				{
+				case	0:	m_shapeDrawer->drawOpenGL(m,colObj->getCollisionShape(),wireColor,getDebugMode(),aabbMin,aabbMax);break;
+				case	1:	m_shapeDrawer->drawShadow(m,m_sundirection*rot,colObj->getCollisionShape(),aabbMin,aabbMax);break;
+				case	2:	m_shapeDrawer->drawOpenGL(m,colObj->getCollisionShape(),wireColor*btScalar(0.3),0,aabbMin,aabbMax);break;
+				}
 			}
 		}
 	}
 }
 
 //
-void DemoApplication::renderme()
+void tgDemoApplication::renderme()
 {
 	myinit();
+	
+	const btVector3 ps = getPs();
 
+	if (m_autocam)
+	{
+		m_cameraTargetPosition += (ps - m_cameraTargetPosition) * 0.05;
+	}
+	
 	updateCamera();
 
 	if (m_dynamicsWorld)
@@ -1334,10 +1335,35 @@ void DemoApplication::renderme()
 
 }
 
+btVector3 tgDemoApplication::getPs()
+{
+	btVector3 ps(0.0, 0.0, 0.0);
+	size_t nps = 0;
+	
+	const btCollisionObjectArray btarr =
+	  getDynamicsWorld()->getCollisionObjectArray();
+	const size_t count = btarr.size();
+	nps += count;
+	/// @todo Use std::for_each()
+	for (int ib = 0; ib < count; ++ib)
+	{
+		const btRigidBody* const pRigid = 
+		        static_cast<btRigidBody*>(btarr[ib]);
+		ps += pRigid->getCenterOfMassPosition();
+	}
+
+	if (nps != 0)
+	{
+	        ps /= static_cast<double>(nps);
+	}
+
+	return ps;
+}
+
 #include "BulletCollision/BroadphaseCollision/btAxisSweep3.h"
 
 
-void	DemoApplication::clientResetScene()
+void	tgDemoApplication::clientResetScene()
 {
 	removePickingConstraint();
 
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.h NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.h
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.h	2014-11-10 09:15:18.684913618 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgDemoApplication.h	2014-08-18 20:29:03.002095342 -0700
@@ -13,11 +13,11 @@ subject to the following restrictions:
 3. This notice may not be removed or altered from any source distribution.
 */
 
-#ifndef DEMO_APPLICATION_H
-#define DEMO_APPLICATION_H
+#ifndef TG_DEMO_APPLICATION_H
+#define TG_DEMO_APPLICATION_H
 
 
-#include "GlutStuff.h"
+#include "tgGlutStuff.h"
 #include "GL_ShapeDrawer.h"
 
 #include <stdlib.h>
@@ -38,7 +38,7 @@ class	btTypedConstraint;
 
 
 
-class DemoApplication
+class tgDemoApplication
 {
 protected:
 	void	displayProfileString(int xOffset,int yStart,char* message);
@@ -57,9 +57,6 @@ protected:
 
 	virtual void removePickingConstraint();
 
-	virtual void pickObject(const btVector3& pickPos, const class btCollisionObject* hitObj);
-
-
 	btCollisionShape*	m_shootBoxShape;
 
 	float	m_cameraDistance;
@@ -73,6 +70,8 @@ protected:
 	int	m_mouseOldX;
 	int	m_mouseOldY;
 	int	m_mouseButtons;
+	
+	bool m_autocam;
 public:
 	int	m_modifierKeys;
 protected:
@@ -106,11 +105,15 @@ protected:
 	btVector3		m_sundirection;
 	btScalar		m_defaultContactProcessingThreshold;
 
+private:
+
+	bool exitFlag;
+
 public:
 		
-	DemoApplication();
+	tgDemoApplication();
 	
-	virtual ~DemoApplication();
+	virtual ~tgDemoApplication();
 
 	btDynamicsWorld*		getDynamicsWorld()
 	{
@@ -118,6 +121,8 @@ public:
 	}
 
 	virtual	void initPhysics() = 0;
+	
+	virtual void exitPhysics() = 0;
 
 	virtual	void setDrawClusters(bool drawClusters)
 	{
@@ -152,11 +157,6 @@ public:
 	{
 		m_azi = azi;
 	}
-
-	void	setEle(float ele)
-	{
-		m_ele = ele;
-	}
 	
 	void	setCameraUp(const btVector3& camUp)
 	{
@@ -208,7 +208,7 @@ public:
 
 	virtual void	clientResetScene();
 
-	///Demo functions
+	///tgDemo functions
 	virtual void setShootBoxShape ();
 	virtual void	shootBox(const btVector3& destination);
 
@@ -257,10 +257,16 @@ public:
 	{
 		m_idle = idle;
 	}
-
+	
+	btVector3 getPs();
+	
+	bool getExitFlag()
+	{
+		return exitFlag;
+	}
 
 };
 
-#endif //DEMO_APPLICATION_H
+#endif //TG_DEMO_APPLICATION_H
 
 
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.cpp NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.cpp
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.cpp	2014-11-10 09:15:18.704913617 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.cpp	2014-08-18 20:29:03.002095342 -0700
@@ -1,22 +1,22 @@
 
-#include "GLDebugDrawer.h"
+#include "tgGLDebugDrawer.h"
 #include "GLDebugFont.h"
-#include "GlutStuff.h"
+#include "tgGlutStuff.h"
 
 
 
 #include <stdio.h> //printf debugging
-GLDebugDrawer::GLDebugDrawer()
+tgGLDebugDrawer::tgGLDebugDrawer()
 :m_debugMode(0)
 {
 
 }
 
-GLDebugDrawer::~GLDebugDrawer()
+tgGLDebugDrawer::~tgGLDebugDrawer()
 {
 }
 
-void	GLDebugDrawer::drawLine(const btVector3& from,const btVector3& to,const btVector3& fromColor, const btVector3& toColor)
+void	tgGLDebugDrawer::drawLine(const btVector3& from,const btVector3& to,const btVector3& fromColor, const btVector3& toColor)
 {
 	glBegin(GL_LINES);
 		glColor3f(fromColor.getX(), fromColor.getY(), fromColor.getZ());
@@ -26,12 +26,12 @@ void	GLDebugDrawer::drawLine(const btVec
 	glEnd();
 }
 
-void	GLDebugDrawer::drawLine(const btVector3& from,const btVector3& to,const btVector3& color)
+void	tgGLDebugDrawer::drawLine(const btVector3& from,const btVector3& to,const btVector3& color)
 {
 	drawLine(from,to,color,color);
 }
 
-void GLDebugDrawer::drawSphere (const btVector3& p, btScalar radius, const btVector3& color)
+void tgGLDebugDrawer::drawSphere (const btVector3& p, btScalar radius, const btVector3& color)
 {
 	glColor4f (color.getX(), color.getY(), color.getZ(), btScalar(1.0f));
 	glPushMatrix ();
@@ -69,7 +69,7 @@ void GLDebugDrawer::drawSphere (const bt
 
 
 
-void	GLDebugDrawer::drawTriangle(const btVector3& a,const btVector3& b,const btVector3& c,const btVector3& color,btScalar alpha)
+void	tgGLDebugDrawer::drawTriangle(const btVector3& a,const btVector3& b,const btVector3& c,const btVector3& color,btScalar alpha)
 {
 //	if (m_debugMode > 0)
 	{
@@ -84,24 +84,24 @@ void	GLDebugDrawer::drawTriangle(const b
 	}
 }
 
-void	GLDebugDrawer::setDebugMode(int debugMode)
+void	tgGLDebugDrawer::setDebugMode(int debugMode)
 {
 	m_debugMode = debugMode;
 
 }
 
-void	GLDebugDrawer::draw3dText(const btVector3& location,const char* textString)
+void	tgGLDebugDrawer::draw3dText(const btVector3& location,const char* textString)
 {
 	glRasterPos3f(location.x(),  location.y(),  location.z());
 	//BMF_DrawString(BMF_GetFont(BMF_kHelvetica10),textString);
 }
 
-void	GLDebugDrawer::reportErrorWarning(const char* warningString)
+void	tgGLDebugDrawer::reportErrorWarning(const char* warningString)
 {
 	printf("%s\n",warningString);
 }
 
-void	GLDebugDrawer::drawContactPoint(const btVector3& pointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)
+void	tgGLDebugDrawer::drawContactPoint(const btVector3& pointOnB,const btVector3& normalOnB,btScalar distance,int lifeTime,const btVector3& color)
 {
 	
 	{
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.h NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.h
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.h	2014-11-10 09:15:18.696913618 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGLDebugDrawer.h	2014-08-18 20:29:03.006093341 -0700
@@ -1,18 +1,18 @@
-#ifndef GL_DEBUG_DRAWER_H
-#define GL_DEBUG_DRAWER_H
+#ifndef tgGL_DEBUG_DRAWER_H
+#define tgGL_DEBUG_DRAWER_H
 
 #include "LinearMath/btIDebugDraw.h"
 
 
 
-class GLDebugDrawer : public btIDebugDraw
+class tgGLDebugDrawer : public btIDebugDraw
 {
 	int m_debugMode;
 
 public:
 
-	GLDebugDrawer();
-	virtual ~GLDebugDrawer(); 
+	tgGLDebugDrawer();
+	virtual ~tgGLDebugDrawer(); 
 
 	virtual void	drawLine(const btVector3& from,const btVector3& to,const btVector3& fromColor, const btVector3& toColor);
 
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.cpp NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.cpp
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.cpp	2014-11-10 09:15:18.716913617 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.cpp	2014-08-18 20:29:03.006093341 -0700
@@ -1,14 +1,14 @@
 
 #ifndef _WINDOWS
 
-#include "GlutDemoApplication.h"
+#include "tgGlutDemoApplication.h"
 
-#include "GlutStuff.h"
+#include "tgGlutStuff.h"
 
 #include "BulletDynamics/Dynamics/btDiscreteDynamicsWorld.h"
 #include "BulletDynamics/Dynamics/btRigidBody.h"
 
-void	GlutDemoApplication::updateModifierKeys()
+void	tgGlutDemoApplication::updateModifierKeys()
 {
 	m_modifierKeys = 0;
 	if (glutGetModifiers() & GLUT_ACTIVE_ALT)
@@ -21,7 +21,7 @@ void	GlutDemoApplication::updateModifier
 		m_modifierKeys |= BT_ACTIVE_SHIFT;
 }
 
-void GlutDemoApplication::specialKeyboard(int key, int x, int y)	
+void tgGlutDemoApplication::specialKeyboard(int key, int x, int y)	
 {
 	(void)x;
 	(void)y;
@@ -43,21 +43,8 @@ void GlutDemoApplication::specialKeyboar
 
 	case GLUT_KEY_END:
 		{
-			int numObj = getDynamicsWorld()->getNumCollisionObjects();
-			if (numObj)
-			{
-				btCollisionObject* obj = getDynamicsWorld()->getCollisionObjectArray()[numObj-1];
-
-				getDynamicsWorld()->removeCollisionObject(obj);
-				btRigidBody* body = btRigidBody::upcast(obj);
-				if (body && body->getMotionState())
-				{
-					delete body->getMotionState();					
-				}
-				delete obj;
-
-
-			}
+			
+			exitPhysics();
 			break;
 		}
 	case GLUT_KEY_LEFT : stepLeft(); break;
@@ -76,7 +63,7 @@ void GlutDemoApplication::specialKeyboar
 
 }
 
-void GlutDemoApplication::swapBuffers()
+void tgGlutDemoApplication::swapBuffers()
 {
 	glutSwapBuffers();
 
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.h NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.h
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.h	2014-11-10 09:15:18.708913617 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutDemoApplication.h	2014-08-18 20:29:03.006093341 -0700
@@ -14,12 +14,12 @@ subject to the following restrictions:
 */
 
 
-#ifndef GLUT_DEMO_APPLICATION_H
-#define GLUT_DEMO_APPLICATION_H
+#ifndef TG_GLUT_DEMO_APPLICATION_H
+#define TG_GLUT_DEMO_APPLICATION_H
 
-#include "DemoApplication.h"
+#include "tgDemoApplication.h"
 
-ATTRIBUTE_ALIGNED16(class) GlutDemoApplication : public DemoApplication
+ATTRIBUTE_ALIGNED16(class) tgGlutDemoApplication : public tgDemoApplication
 {
 public:
 
@@ -32,5 +32,5 @@ public:
 	virtual	void	updateModifierKeys();
 
 };
-#endif //GLUT_DEMO_APPLICATION_H
+#endif //TG_GLUT_DEMO_APPLICATION_H
 
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.cpp NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.cpp
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.cpp	2014-11-10 09:15:19.724913575 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.cpp	2014-08-18 20:29:03.006093341 -0700
@@ -15,77 +15,82 @@ subject to the following restrictions:
 
 #ifndef _WINDOWS
 
-#include "DemoApplication.h"
+#include "tgDemoApplication.h"
+#include <iostream> // Debugging only
 
-//glut is C code, this global gDemoApplication links glut to the C++ demo
-static DemoApplication* gDemoApplication = 0;
+//glut is C code, this global gtgDemoApplication links glut to the C++ demo
+static tgDemoApplication* gtgDemoApplication = 0;
 
 
-#include "GlutStuff.h"
+#include "tgGlutStuff.h"
 
 static	void glutKeyboardCallback(unsigned char key, int x, int y)
 {
-	gDemoApplication->keyboardCallback(key,x,y);
+	gtgDemoApplication->keyboardCallback(key,x,y);
 }
 
 static	void glutKeyboardUpCallback(unsigned char key, int x, int y)
 {
-  gDemoApplication->keyboardUpCallback(key,x,y);
+  gtgDemoApplication->keyboardUpCallback(key,x,y);
 }
 
 static void glutSpecialKeyboardCallback(int key, int x, int y)
 {
-	gDemoApplication->specialKeyboard(key,x,y);
+	gtgDemoApplication->specialKeyboard(key,x,y);
 }
 
 static void glutSpecialKeyboardUpCallback(int key, int x, int y)
 {
-	gDemoApplication->specialKeyboardUp(key,x,y);
+	gtgDemoApplication->specialKeyboardUp(key,x,y);
 }
 
 
 static void glutReshapeCallback(int w, int h)
 {
-	gDemoApplication->reshape(w,h);
+	gtgDemoApplication->reshape(w,h);
 }
 
 static void glutMoveAndDisplayCallback()
 {
-	gDemoApplication->moveAndDisplay();
+	gtgDemoApplication->moveAndDisplay();
 }
 
 static void glutMouseFuncCallback(int button, int state, int x, int y)
 {
-	gDemoApplication->mouseFunc(button,state,x,y);
+	gtgDemoApplication->mouseFunc(button,state,x,y);
 }
 
 
 static void	glutMotionFuncCallback(int x,int y)
 {
-	gDemoApplication->mouseMotionFunc(x,y);
+	gtgDemoApplication->mouseMotionFunc(x,y);
 }
 
 
 static void glutDisplayCallback(void)
 {
-	gDemoApplication->displayCallback();
+	gtgDemoApplication->displayCallback();
 }
 
 
-int glutmain(int argc, char **argv,int width,int height,const char* title,DemoApplication* demoApp) {
+void tgglutmain(int width,int height,const char* title,tgDemoApplication* demoApp) {
     
-	gDemoApplication = demoApp;
-
+	gtgDemoApplication = demoApp;
+	
+	//Faking argc and argv since GLUT doesn't need to receive them
+	static char** argv = NULL;
+	static int argc = 0;
+	
 	glutInit(&argc, argv);
     glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA | GLUT_DEPTH | GLUT_STENCIL);
-    glutInitWindowPosition(width/2, height/2);
+    glutInitWindowPosition(0, 0);
     glutInitWindowSize(width, height);
     glutCreateWindow(title);
 #ifdef BT_USE_FREEGLUT
 	glutSetOption (GLUT_ACTION_ON_WINDOW_CLOSE, GLUT_ACTION_GLUTMAINLOOP_RETURNS);
 #endif
 
-    gDemoApplication->myinit();
+    gtgDemoApplication->myinit();
 
 	glutKeyboardFunc(glutKeyboardCallback);
 	glutKeyboardUpFunc(glutKeyboardUpCallback);
@@ -110,11 +115,13 @@ CGLContextObj cgl_context = CGLGetCurren
 CGLSetParameter(cgl_context, kCGLCPSwapInterval, &swap_interval);
 #endif
 
-
-	
-    glutMainLoop();
-    return 0;
 }
 
+#if (0)
+void tgGlutMainEventLoop()
+{
+	glutMainLoopEvent();
+}
+#endif
 
 #endif //_WINDOWS
diff -rupN NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.h NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.h
--- NTRTTests/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.h	2014-11-10 09:15:18.720913617 -0800
+++ NTRTsim/env/build/bullet/Demos/OpenGL_FreeGlut/tgGlutStuff.h	2014-08-18 20:29:03.006093341 -0700
@@ -40,7 +40,7 @@ subject to the following restrictions:
 
 #ifdef _WINDOWS
 #define BT_ACTIVE_ALT   VK_LMENU
-#define BT_ACTIVE_SHIFT VK_LSHIFT
+
 #else
 #define BT_KEY_K 'k'
 #define BT_KEY_LEFT			GLUT_KEY_LEFT
@@ -67,9 +67,11 @@ subject to the following restrictions:
 
 
 
-class DemoApplication;
+class tgDemoApplication;
+
+void tgglutmain(int width,int height,const char* title,tgDemoApplication* demoApp);
 
-int glutmain(int argc, char **argv,int width,int height,const char* title,DemoApplication* demoApp);
+void tgGlutMainEventLoop();
 
 #if defined(BT_USE_DOUBLE_PRECISION)
 #define btglLoadMatrix glLoadMatrixd
